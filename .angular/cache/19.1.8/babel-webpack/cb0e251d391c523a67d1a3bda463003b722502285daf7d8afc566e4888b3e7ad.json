{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\nclass TranslateLoader {}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nlet TranslateFakeLoader = /*#__PURE__*/(() => {\n  class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang) {\n      void lang;\n      return of({});\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵTranslateFakeLoader_BaseFactory;\n      return function TranslateFakeLoader_Factory(__ngFactoryType__) {\n        return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(__ngFactoryType__ || TranslateFakeLoader);\n      };\n    })();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateFakeLoader,\n      factory: TranslateFakeLoader.ɵfac\n    });\n  }\n  return TranslateFakeLoader;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass MissingTranslationHandler {}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nlet FakeMissingTranslationHandler = /*#__PURE__*/(() => {\n  class FakeMissingTranslationHandler {\n    handle(params) {\n      return params.key;\n    }\n    static ɵfac = function FakeMissingTranslationHandler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FakeMissingTranslationHandler)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: FakeMissingTranslationHandler,\n      factory: FakeMissingTranslationHandler.ɵfac\n    });\n  }\n  return FakeMissingTranslationHandler;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  const t1 = typeof o1,\n    t2 = typeof o2;\n  let length, key, keySet;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\nfunction isDict(value) {\n  return isObject(value) && !isArray(value) && value !== null;\n}\nfunction isObject(value) {\n  return typeof value === 'object';\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction mergeDeep(target, source) {\n  const output = Object.assign({}, target);\n  if (!isObject(target)) {\n    return mergeDeep({}, source);\n  }\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isDict(source[key])) {\n        if (key in target) {\n          output[key] = mergeDeep(target[key], source[key]);\n        } else {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n  return output;\n}\n/**\n * Gets a value from an object by composed key\n * getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n * @param target\n * @param key\n */\nfunction getValue(target, key) {\n  const keys = key.split(\".\");\n  key = \"\";\n  do {\n    key += keys.shift();\n    if (isDefined(target) && isDefined(target[key]) && (isDict(target[key]) || isArray(target[key]) || !keys.length)) {\n      target = target[key];\n      key = \"\";\n    } else if (!keys.length) {\n      target = undefined;\n    } else {\n      key += \".\";\n    }\n  } while (keys.length);\n  return target;\n}\n/**\n * Gets a value from an object by composed key\n * parser.setValue({a:{b:{c: \"test\"}}}, 'a.b.c', \"test2\") ==> {a:{b:{c: \"test2\"}}}\n * @param target an object\n * @param key E.g. \"a.b.c\"\n * @param value to set\n */\nfunction setValue(target, key, value) {\n  const keys = key.split('.');\n  let current = target;\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    // If we're at the last key, set the value\n    if (i === keys.length - 1) {\n      current[key] = value;\n    } else {\n      // If the key doesn't exist or isn't an object, create an empty object\n      if (!current[key] || !isDict(current[key])) {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n  }\n}\nclass TranslateParser {}\nlet TranslateDefaultParser = /*#__PURE__*/(() => {\n  class TranslateDefaultParser extends TranslateParser {\n    templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    interpolate(expr, params) {\n      if (isString(expr)) {\n        return this.interpolateString(expr, params);\n      } else if (isFunction(expr)) {\n        return this.interpolateFunction(expr, params);\n      }\n      return undefined;\n    }\n    interpolateFunction(fn, params) {\n      return fn(params);\n    }\n    interpolateString(expr, params) {\n      if (!params) {\n        return expr;\n      }\n      return expr.replace(this.templateMatcher, (substring, b) => {\n        const r = getValue(params, b);\n        return isDefined(r) ? r : substring;\n      });\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵTranslateDefaultParser_BaseFactory;\n      return function TranslateDefaultParser_Factory(__ngFactoryType__) {\n        return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(__ngFactoryType__ || TranslateDefaultParser);\n      };\n    })();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateDefaultParser,\n      factory: TranslateDefaultParser.ɵfac\n    });\n  }\n  return TranslateDefaultParser;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass TranslateCompiler {}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nlet TranslateFakeCompiler = /*#__PURE__*/(() => {\n  class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value, lang) {\n      void lang;\n      return value;\n    }\n    compileTranslations(translations, lang) {\n      void lang;\n      return translations;\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵTranslateFakeCompiler_BaseFactory;\n      return function TranslateFakeCompiler_Factory(__ngFactoryType__) {\n        return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(__ngFactoryType__ || TranslateFakeCompiler);\n      };\n    })();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateFakeCompiler,\n      factory: TranslateFakeCompiler.ɵfac\n    });\n  }\n  return TranslateFakeCompiler;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  defaultLang;\n  /**\n   * The lang currently used\n   */\n  currentLang = this.defaultLang;\n  /**\n   * a list of translations per lang\n   */\n  translations = {};\n  /**\n   * an array of langs\n   */\n  langs = [];\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  onTranslationChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  onLangChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  onDefaultLangChange = new EventEmitter();\n}\nconst ISOLATE_TRANSLATE_SERVICE = new InjectionToken('ISOLATE_TRANSLATE_SERVICE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nconst makeObservable = value => {\n  return isObservable(value) ? value : of(value);\n};\nlet TranslateService = /*#__PURE__*/(() => {\n  class TranslateService {\n    store;\n    currentLoader;\n    compiler;\n    parser;\n    missingTranslationHandler;\n    useDefaultLang;\n    extend;\n    loadingTranslations;\n    pending = false;\n    _translationRequests = {};\n    lastUseLanguage = null;\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onTranslationChange() {\n      return this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onLangChange() {\n      return this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onDefaultLangChange() {\n      return this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang() {\n      return this.store.defaultLang;\n    }\n    set defaultLang(defaultLang) {\n      this.store.defaultLang = defaultLang;\n    }\n    /**\n     * The lang currently used\n     */\n    get currentLang() {\n      return this.store.currentLang;\n    }\n    set currentLang(currentLang) {\n      this.store.currentLang = currentLang;\n    }\n    /**\n     * an array of langs\n     */\n    get langs() {\n      return this.store.langs;\n    }\n    set langs(langs) {\n      this.store.langs = langs;\n    }\n    /**\n     * a list of translations per lang\n     */\n    get translations() {\n      return this.store.translations;\n    }\n    set translations(translations) {\n      this.store.translations = translations;\n    }\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param isolate whether this service should use the store or not\n     * @param extend To make a child module extend (and use) translations from parent modules.\n     * @param defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n      this.store = store;\n      this.currentLoader = currentLoader;\n      this.compiler = compiler;\n      this.parser = parser;\n      this.missingTranslationHandler = missingTranslationHandler;\n      this.useDefaultLang = useDefaultLang;\n      this.extend = extend;\n      if (isolate) {\n        this.store = new TranslateStore();\n      }\n      if (defaultLanguage) {\n        this.setDefaultLang(defaultLanguage);\n      }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     */\n    setDefaultLang(lang) {\n      if (lang === this.defaultLang) {\n        return;\n      }\n      const pending = this.retrieveTranslations(lang);\n      if (typeof pending !== \"undefined\") {\n        // on init set the defaultLang immediately\n        if (this.defaultLang == null) {\n          this.defaultLang = lang;\n        }\n        pending.pipe(take(1)).subscribe(() => {\n          this.changeDefaultLang(lang);\n        });\n      } else {\n        // we already have this language\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Gets the default language used\n     */\n    getDefaultLang() {\n      return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     */\n    use(lang) {\n      // remember the language that was called\n      // we need this with multiple fast calls to use()\n      // where translation loads might complete in random order\n      this.lastUseLanguage = lang;\n      // don't change the language if the language given is already selected\n      if (lang === this.currentLang) {\n        return of(this.translations[lang]);\n      }\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n      const pending = this.retrieveTranslations(lang);\n      if (isObservable(pending)) {\n        pending.pipe(take(1)).subscribe(() => {\n          this.changeLang(lang);\n        });\n        return pending;\n      } else {\n        // we have this language, return an Observable\n        this.changeLang(lang);\n        return of(this.translations[lang]);\n      }\n    }\n    /**\n     * Changes the current lang\n     */\n    changeLang(lang) {\n      // received a new language file\n      // but this was not the one requested last\n      if (lang !== this.lastUseLanguage) {\n        return;\n      }\n      this.currentLang = lang;\n      this.onLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n      // if there is no default lang, use the one that we just set\n      if (this.defaultLang == null) {\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Retrieves the given translations\n     */\n    retrieveTranslations(lang) {\n      // if this language is unavailable or extend is true, ask for it\n      if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n        this._translationRequests[lang] = this._translationRequests[lang] || this.loadAndCompileTranslations(lang);\n        return this._translationRequests[lang];\n      }\n      return undefined;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     *\n     * @deprecated This function is meant for internal use. There should\n     * be no reason to use outside this service. You can plug into this\n     * functionality by using a customer TranslateLoader or TranslateCompiler.\n     * To load a new language use setDefaultLang() and/or use()\n     */\n    getTranslation(lang) {\n      return this.loadAndCompileTranslations(lang);\n    }\n    loadAndCompileTranslations(lang) {\n      this.pending = true;\n      const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n      this.loadingTranslations = loadingTranslations.pipe(map(res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n      this.loadingTranslations.subscribe({\n        next: res => {\n          this.translations[lang] = this.extend && this.translations[lang] ? {\n            ...res,\n            ...this.translations[lang]\n          } : res;\n          this.updateLangs();\n          this.pending = false;\n        },\n        error: err => {\n          void err;\n          this.pending = false;\n        }\n      });\n      return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n      const interpolatableTranslations = this.compiler.compileTranslations(translations, lang);\n      if ((shouldMerge || this.extend) && this.translations[lang]) {\n        this.translations[lang] = mergeDeep(this.translations[lang], interpolatableTranslations);\n      } else {\n        this.translations[lang] = interpolatableTranslations;\n      }\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Returns an array of currently available langs\n     */\n    getLangs() {\n      return this.langs;\n    }\n    /**\n     * Add available languages\n     */\n    addLangs(langs) {\n      const newLangs = langs.filter(lang => !this.langs.includes(lang));\n      if (newLangs.length > 0) {\n        this.langs = [...this.langs, ...newLangs];\n      }\n    }\n    /**\n     * Update the list of available languages\n     */\n    updateLangs() {\n      this.addLangs(Object.keys(this.translations));\n    }\n    getParsedResultForKey(translations, key, interpolateParams) {\n      let res;\n      if (translations) {\n        res = this.runInterpolation(getValue(translations, key), interpolateParams);\n      }\n      if (res === undefined && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n        res = this.runInterpolation(getValue(this.translations[this.defaultLang], key), interpolateParams);\n      }\n      if (res === undefined) {\n        const params = {\n          key,\n          translateService: this\n        };\n        if (typeof interpolateParams !== 'undefined') {\n          params.interpolateParams = interpolateParams;\n        }\n        res = this.missingTranslationHandler.handle(params);\n      }\n      return res !== undefined ? res : key;\n    }\n    runInterpolation(translations, interpolateParams) {\n      if (isArray(translations)) {\n        return translations.map(translation => this.runInterpolation(translation, interpolateParams));\n      } else if (isDict(translations)) {\n        const result = {};\n        for (const key in translations) {\n          const res = this.runInterpolation(translations[key], interpolateParams);\n          if (res !== undefined) {\n            result[key] = res;\n          }\n        }\n        return result;\n      } else {\n        return this.parser.interpolate(translations, interpolateParams);\n      }\n    }\n    /**\n     * Returns the parsed result of the translations\n     */\n    getParsedResult(translations, key, interpolateParams) {\n      // handle a bunch of keys\n      if (key instanceof Array) {\n        const result = {};\n        let observables = false;\n        for (const k of key) {\n          result[k] = this.getParsedResultForKey(translations, k, interpolateParams);\n          observables = observables || isObservable(result[k]);\n        }\n        if (!observables) {\n          return result;\n        }\n        const sources = key.map(k => makeObservable(result[k]));\n        return forkJoin(sources).pipe(map(arr => {\n          const obj = {};\n          arr.forEach((value, index) => {\n            obj[key[index]] = value;\n          });\n          return obj;\n        }));\n      }\n      return this.getParsedResultForKey(translations, key, interpolateParams);\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @returns the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" is required and cannot be empty`);\n      }\n      // check if we are loading a new translation to use\n      if (this.pending) {\n        return this.loadingTranslations.pipe(concatMap(res => {\n          return makeObservable(this.getParsedResult(res, key, interpolateParams));\n        }));\n      }\n      return makeObservable(this.getParsedResult(this.translations[this.currentLang], key, interpolateParams));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" is required and cannot be empty`);\n      }\n      return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(event => {\n        const res = this.getParsedResult(event.translations, key, interpolateParams);\n        return makeObservable(res);\n      })));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n      return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(event => {\n        const res = this.getParsedResult(event.translations, key, interpolateParams);\n        return makeObservable(res);\n      })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages\n     * will be used except any promise handling.\n     */\n    instant(key, interpolateParams) {\n      if (!isDefined(key) || key.length === 0) {\n        throw new Error('Parameter \"key\" is required and cannot be empty');\n      }\n      const result = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      if (isObservable(result)) {\n        if (Array.isArray(key)) {\n          return key.reduce((acc, currKey) => {\n            acc[currKey] = currKey;\n            return acc;\n          }, {});\n        }\n        return key;\n      }\n      return result;\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     */\n    set(key, translation, lang = this.currentLang) {\n      setValue(this.translations[lang], key, isString(translation) ? this.compiler.compile(translation, lang) : this.compiler.compileTranslations(translation, lang));\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Changes the default lang\n     */\n    changeDefaultLang(lang) {\n      this.defaultLang = lang;\n      this.onDefaultLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     */\n    reloadLang(lang) {\n      this.resetLang(lang);\n      return this.loadAndCompileTranslations(lang);\n    }\n    /**\n     * Deletes inner translation\n     */\n    resetLang(lang) {\n      delete this._translationRequests[lang];\n      delete this.translations[lang];\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     */\n    getBrowserLang() {\n      if (typeof window === 'undefined' || !window.navigator) {\n        return undefined;\n      }\n      const browserLang = this.getBrowserCultureLang();\n      return browserLang ? browserLang.split(/[-_]/)[0] : undefined;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     */\n    getBrowserCultureLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n      return window.navigator.languages ? window.navigator.languages[0] : window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    }\n    static ɵfac = function TranslateService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TranslateService)(i0.ɵɵinject(TranslateStore), i0.ɵɵinject(TranslateLoader), i0.ɵɵinject(TranslateCompiler), i0.ɵɵinject(TranslateParser), i0.ɵɵinject(MissingTranslationHandler), i0.ɵɵinject(USE_DEFAULT_LANG), i0.ɵɵinject(ISOLATE_TRANSLATE_SERVICE), i0.ɵɵinject(USE_EXTEND), i0.ɵɵinject(DEFAULT_LANGUAGE));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateService,\n      factory: TranslateService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TranslateService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TranslateDirective = /*#__PURE__*/(() => {\n  class TranslateDirective {\n    translateService;\n    element;\n    _ref;\n    key;\n    lastParams;\n    currentParams;\n    onLangChangeSub;\n    onDefaultLangChangeSub;\n    onTranslationChangeSub;\n    set translate(key) {\n      if (key) {\n        this.key = key;\n        this.checkNodes();\n      }\n    }\n    set translateParams(params) {\n      if (!equals(this.currentParams, params)) {\n        this.currentParams = params;\n        this.checkNodes(true);\n      }\n    }\n    constructor(translateService, element, _ref) {\n      this.translateService = translateService;\n      this.element = element;\n      this._ref = _ref;\n      // subscribe to onTranslationChange event, in case the translations of the current lang change\n      if (!this.onTranslationChangeSub) {\n        this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(event => {\n          if (event.lang === this.translateService.currentLang) {\n            this.checkNodes(true, event.translations);\n          }\n        });\n      }\n      // subscribe to onLangChange event, in case the language changes\n      if (!this.onLangChangeSub) {\n        this.onLangChangeSub = this.translateService.onLangChange.subscribe(event => {\n          this.checkNodes(true, event.translations);\n        });\n      }\n      // subscribe to onDefaultLangChange event, in case the default language changes\n      if (!this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(event => {\n          void event;\n          this.checkNodes(true);\n        });\n      }\n    }\n    ngAfterViewChecked() {\n      this.checkNodes();\n    }\n    checkNodes(forceUpdate = false, translations) {\n      let nodes = this.element.nativeElement.childNodes;\n      // if the element is empty\n      if (!nodes.length) {\n        // we add the key as content\n        this.setContent(this.element.nativeElement, this.key);\n        nodes = this.element.nativeElement.childNodes;\n      }\n      nodes.forEach(n => {\n        const node = n;\n        if (node.nodeType === 3) {\n          // node type 3 is a text node\n          let key;\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n          if (isDefined(node.lookupKey)) {\n            key = node.lookupKey;\n          } else if (this.key) {\n            key = this.key;\n          } else {\n            const content = this.getContent(node);\n            const trimmedContent = content.trim();\n            if (trimmedContent.length) {\n              node.lookupKey = trimmedContent;\n              // we want to use the content as a key, not the translation value\n              if (content !== node.currentValue) {\n                key = trimmedContent;\n                // the content was changed from the user, we'll use it as a reference if needed\n                node.originalContent = content || node.originalContent;\n              } else if (node.originalContent) {\n                // the content seems ok, but the lang has changed\n                // the current content is the translation, not the key, use the last real content as key\n                key = node.originalContent.trim();\n              }\n            }\n          }\n          this.updateValue(key, node, translations);\n        }\n      });\n    }\n    updateValue(key, node, translations) {\n      if (key) {\n        if (node.lastKey === key && this.lastParams === this.currentParams) {\n          return;\n        }\n        this.lastParams = this.currentParams;\n        const onTranslation = res => {\n          if (res !== key || !node.lastKey) {\n            node.lastKey = key;\n          }\n          if (!node.originalContent) {\n            node.originalContent = this.getContent(node);\n          }\n          node.currentValue = isDefined(res) ? res : node.originalContent || key;\n          // we replace in the original content to preserve spaces that we might have trimmed\n          this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n          this._ref.markForCheck();\n        };\n        if (isDefined(translations)) {\n          const res = this.translateService.getParsedResult(translations, key, this.currentParams);\n          if (isObservable(res)) {\n            res.subscribe({\n              next: onTranslation\n            });\n          } else {\n            onTranslation(res);\n          }\n        } else {\n          this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n        }\n      }\n    }\n    getContent(node) {\n      return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    setContent(node, content) {\n      if (isDefined(node.textContent)) {\n        node.textContent = content;\n      } else {\n        node.data = content;\n      }\n    }\n    ngOnDestroy() {\n      if (this.onLangChangeSub) {\n        this.onLangChangeSub.unsubscribe();\n      }\n      if (this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub.unsubscribe();\n      }\n      if (this.onTranslationChangeSub) {\n        this.onTranslationChangeSub.unsubscribe();\n      }\n    }\n    static ɵfac = function TranslateDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TranslateDirective)(i0.ɵɵdirectiveInject(TranslateService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TranslateDirective,\n      selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n      inputs: {\n        translate: \"translate\",\n        translateParams: \"translateParams\"\n      }\n    });\n  }\n  return TranslateDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TranslatePipe = /*#__PURE__*/(() => {\n  class TranslatePipe {\n    translate;\n    _ref;\n    value = '';\n    lastKey = null;\n    lastParams = [];\n    onTranslationChange;\n    onLangChange;\n    onDefaultLangChange;\n    constructor(translate, _ref) {\n      this.translate = translate;\n      this._ref = _ref;\n    }\n    updateValue(key, interpolateParams, translations) {\n      const onTranslation = res => {\n        this.value = res !== undefined ? res : key;\n        this.lastKey = key;\n        this._ref.markForCheck();\n      };\n      if (translations) {\n        const res = this.translate.getParsedResult(translations, key, interpolateParams);\n        if (isObservable(res)) {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      }\n      this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    transform(query, ...args) {\n      if (!query || !query.length) {\n        return query;\n      }\n      // if we ask another time for the same key, return the last value\n      if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n        return this.value;\n      }\n      let interpolateParams = undefined;\n      if (isDefined(args[0]) && args.length) {\n        if (isString(args[0]) && args[0].length) {\n          // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n          // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n          const validArgs = args[0].replace(/(')?([a-zA-Z0-9_]+)(')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(')(.*?)(')/g, ':\"$3\"');\n          try {\n            interpolateParams = JSON.parse(validArgs);\n          } catch (e) {\n            void e;\n            throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n          }\n        } else if (isDict(args[0])) {\n          interpolateParams = args[0];\n        }\n      }\n      // store the query, in case it changes\n      this.lastKey = query;\n      // store the params, in case they change\n      this.lastParams = args;\n      // set the value\n      this.updateValue(query, interpolateParams);\n      // if there is a subscription to onLangChange, clean it\n      this._dispose();\n      // subscribe to onTranslationChange event, in case the translations change\n      if (!this.onTranslationChange) {\n        this.onTranslationChange = this.translate.onTranslationChange.subscribe(event => {\n          if (this.lastKey && event.lang === this.translate.currentLang) {\n            this.lastKey = null;\n            this.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      }\n      // subscribe to onLangChange event, in case the language changes\n      if (!this.onLangChange) {\n        this.onLangChange = this.translate.onLangChange.subscribe(event => {\n          if (this.lastKey) {\n            this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n            this.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      }\n      // subscribe to onDefaultLangChange event, in case the default language changes\n      if (!this.onDefaultLangChange) {\n        this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n          if (this.lastKey) {\n            this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n            this.updateValue(query, interpolateParams);\n          }\n        });\n      }\n      return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     */\n    _dispose() {\n      if (typeof this.onTranslationChange !== 'undefined') {\n        this.onTranslationChange.unsubscribe();\n        this.onTranslationChange = undefined;\n      }\n      if (typeof this.onLangChange !== 'undefined') {\n        this.onLangChange.unsubscribe();\n        this.onLangChange = undefined;\n      }\n      if (typeof this.onDefaultLangChange !== 'undefined') {\n        this.onDefaultLangChange.unsubscribe();\n        this.onDefaultLangChange = undefined;\n      }\n    }\n    ngOnDestroy() {\n      this._dispose();\n    }\n    static ɵfac = function TranslatePipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TranslatePipe)(i0.ɵɵdirectiveInject(TranslateService, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"translate\",\n      type: TranslatePipe,\n      pure: false\n    });\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslatePipe,\n      factory: TranslatePipe.ɵfac\n    });\n  }\n  return TranslatePipe;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction _(key) {\n  return key;\n}\nconst provideTranslateService = (config = {}) => {\n  return makeEnvironmentProviders([config.loader || {\n    provide: TranslateLoader,\n    useClass: TranslateFakeLoader\n  }, config.compiler || {\n    provide: TranslateCompiler,\n    useClass: TranslateFakeCompiler\n  }, config.parser || {\n    provide: TranslateParser,\n    useClass: TranslateDefaultParser\n  }, config.missingTranslationHandler || {\n    provide: MissingTranslationHandler,\n    useClass: FakeMissingTranslationHandler\n  }, TranslateStore, {\n    provide: ISOLATE_TRANSLATE_SERVICE,\n    useValue: config.isolate\n  }, {\n    provide: USE_DEFAULT_LANG,\n    useValue: config.useDefaultLang\n  }, {\n    provide: USE_EXTEND,\n    useValue: config.extend\n  }, {\n    provide: DEFAULT_LANGUAGE,\n    useValue: config.defaultLanguage\n  }, TranslateService]);\n};\nlet TranslateModule = /*#__PURE__*/(() => {\n  class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     */\n    static forRoot(config = {}) {\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, TranslateStore, {\n          provide: ISOLATE_TRANSLATE_SERVICE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n    /**\n     * Use this method in your other (non-root) modules to import the directive/pipe\n     */\n    static forChild(config = {}) {\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, {\n          provide: ISOLATE_TRANSLATE_SERVICE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n    static ɵfac = function TranslateModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TranslateModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: TranslateModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return TranslateModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, ISOLATE_TRANSLATE_SERVICE, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, _, equals, getValue, isArray, isDefined, isDict, isFunction, isObject, isString, mergeDeep, provideTranslateService, setValue };","map":{"version":3,"names":["i0","Injectable","EventEmitter","InjectionToken","Inject","Directive","Input","Pipe","makeEnvironmentProviders","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","TranslateLoader","TranslateFakeLoader","getTranslation","lang","ɵfac","ɵTranslateFakeLoader_BaseFactory","TranslateFakeLoader_Factory","__ngFactoryType__","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","key","FakeMissingTranslationHandler_Factory","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isDict","isObject","isString","isFunction","mergeDeep","target","source","output","assign","keys","forEach","getValue","split","shift","undefined","setValue","current","i","TranslateParser","TranslateDefaultParser","templateMatcher","interpolate","expr","interpolateString","interpolateFunction","fn","replace","substring","b","r","ɵTranslateDefaultParser_BaseFactory","TranslateDefaultParser_Factory","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","ɵTranslateFakeCompiler_BaseFactory","TranslateFakeCompiler_Factory","TranslateStore","defaultLang","currentLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","ISOLATE_TRANSLATE_SERVICE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","makeObservable","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","extend","loadingTranslations","pending","_translationRequests","lastUseLanguage","constructor","isolate","defaultLanguage","setDefaultLang","retrieveTranslations","pipe","subscribe","changeDefaultLang","getDefaultLang","use","changeLang","emit","loadAndCompileTranslations","res","next","updateLangs","error","err","setTranslation","shouldMerge","interpolatableTranslations","getLangs","addLangs","newLangs","filter","includes","getParsedResultForKey","interpolateParams","runInterpolation","translateService","translation","result","getParsedResult","observables","k","sources","arr","obj","index","get","Error","getStreamOnTranslationChange","event","stream","instant","reduce","acc","currKey","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","getBrowserCultureLang","languages","language","browserLanguage","userLanguage","TranslateService_Factory","ɵɵinject","providedIn","TranslateDirective","element","_ref","lastParams","currentParams","onLangChangeSub","onDefaultLangChangeSub","onTranslationChangeSub","translate","checkNodes","translateParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","n","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","TranslateDirective_Factory","ɵɵdirectiveInject","ElementRef","ChangeDetectorRef","ɵdir","ɵɵdefineDirective","type","selectors","inputs","TranslatePipe","transform","query","args","validArgs","JSON","parse","e","SyntaxError","_dispose","TranslatePipe_Factory","ɵpipe","ɵɵdefinePipe","name","pure","_","provideTranslateService","config","loader","provide","useClass","useValue","TranslateModule","forRoot","ngModule","providers","forChild","TranslateModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector"],"sources":["C:/Users/zeeshan.rasool/Desktop/zeeshan/my-portf/node_modules/@ngx-translate/core/fesm2022/ngx-translate-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\nclass TranslateLoader {\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang) {\n        void lang;\n        return of({});\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateFakeLoader, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateFakeLoader });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateFakeLoader, decorators: [{\n            type: Injectable\n        }] });\n\nclass MissingTranslationHandler {\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n    handle(params) {\n        return params.key;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: FakeMissingTranslationHandler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: FakeMissingTranslationHandler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: FakeMissingTranslationHandler, decorators: [{\n            type: Injectable\n        }] });\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    const t1 = typeof o1, t2 = typeof o2;\n    let length, key, keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\nfunction isDict(value) {\n    return isObject(value) && !isArray(value) && value !== null;\n}\nfunction isObject(value) {\n    return typeof value === 'object';\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction mergeDeep(target, source) {\n    const output = Object.assign({}, target);\n    if (!isObject(target)) {\n        return mergeDeep({}, source);\n    }\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key) => {\n            if (isDict(source[key])) {\n                if (key in target) {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n                else {\n                    Object.assign(output, { [key]: source[key] });\n                }\n            }\n            else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n/**\n * Gets a value from an object by composed key\n * getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n * @param target\n * @param key\n */\nfunction getValue(target, key) {\n    const keys = key.split(\".\");\n    key = \"\";\n    do {\n        key += keys.shift();\n        if (isDefined(target) && isDefined(target[key]) && (isDict(target[key]) || isArray(target[key]) || !keys.length)) {\n            target = target[key];\n            key = \"\";\n        }\n        else if (!keys.length) {\n            target = undefined;\n        }\n        else {\n            key += \".\";\n        }\n    } while (keys.length);\n    return target;\n}\n/**\n * Gets a value from an object by composed key\n * parser.setValue({a:{b:{c: \"test\"}}}, 'a.b.c', \"test2\") ==> {a:{b:{c: \"test2\"}}}\n * @param target an object\n * @param key E.g. \"a.b.c\"\n * @param value to set\n */\nfunction setValue(target, key, value) {\n    const keys = key.split('.');\n    let current = target;\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        // If we're at the last key, set the value\n        if (i === keys.length - 1) {\n            current[key] = value;\n        }\n        else {\n            // If the key doesn't exist or isn't an object, create an empty object\n            if (!current[key] || !isDict(current[key])) {\n                current[key] = {};\n            }\n            current = current[key];\n        }\n    }\n}\n\nclass TranslateParser {\n}\nclass TranslateDefaultParser extends TranslateParser {\n    templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    interpolate(expr, params) {\n        if (isString(expr)) {\n            return this.interpolateString(expr, params);\n        }\n        else if (isFunction(expr)) {\n            return this.interpolateFunction(expr, params);\n        }\n        return undefined;\n    }\n    interpolateFunction(fn, params) {\n        return fn(params);\n    }\n    interpolateString(expr, params) {\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, (substring, b) => {\n            const r = getValue(params, b);\n            return isDefined(r)\n                ? r\n                : substring;\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateDefaultParser, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateDefaultParser });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateDefaultParser, decorators: [{\n            type: Injectable\n        }] });\n\nclass TranslateCompiler {\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n    compile(value, lang) {\n        void lang;\n        return value;\n    }\n    compileTranslations(translations, lang) {\n        void lang;\n        return translations;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateFakeCompiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateFakeCompiler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateFakeCompiler, decorators: [{\n            type: Injectable\n        }] });\n\nclass TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    defaultLang;\n    /**\n     * The lang currently used\n     */\n    currentLang = this.defaultLang;\n    /**\n     * a list of translations per lang\n     */\n    translations = {};\n    /**\n     * an array of langs\n     */\n    langs = [];\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onTranslationChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onLangChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onDefaultLangChange = new EventEmitter();\n}\n\nconst ISOLATE_TRANSLATE_SERVICE = new InjectionToken('ISOLATE_TRANSLATE_SERVICE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nconst makeObservable = (value) => {\n    return isObservable(value) ? value : of(value);\n};\nclass TranslateService {\n    store;\n    currentLoader;\n    compiler;\n    parser;\n    missingTranslationHandler;\n    useDefaultLang;\n    extend;\n    loadingTranslations;\n    pending = false;\n    _translationRequests = {};\n    lastUseLanguage = null;\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onTranslationChange() {\n        return this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onLangChange() {\n        return this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onDefaultLangChange() {\n        return this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang() {\n        return this.store.defaultLang;\n    }\n    set defaultLang(defaultLang) {\n        this.store.defaultLang = defaultLang;\n    }\n    /**\n     * The lang currently used\n     */\n    get currentLang() {\n        return this.store.currentLang;\n    }\n    set currentLang(currentLang) {\n        this.store.currentLang = currentLang;\n    }\n    /**\n     * an array of langs\n     */\n    get langs() {\n        return this.store.langs;\n    }\n    set langs(langs) {\n        this.store.langs = langs;\n    }\n    /**\n     * a list of translations per lang\n     */\n    get translations() {\n        return this.store.translations;\n    }\n    set translations(translations) {\n        this.store.translations = translations;\n    }\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param isolate whether this service should use the store or not\n     * @param extend To make a child module extend (and use) translations from parent modules.\n     * @param defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.extend = extend;\n        if (isolate) {\n            this.store = new TranslateStore();\n        }\n        if (defaultLanguage) {\n            this.setDefaultLang(defaultLanguage);\n        }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     */\n    setDefaultLang(lang) {\n        if (lang === this.defaultLang) {\n            return;\n        }\n        const pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (this.defaultLang == null) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe(() => {\n                this.changeDefaultLang(lang);\n            });\n        }\n        else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Gets the default language used\n     */\n    getDefaultLang() {\n        return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     */\n    use(lang) {\n        // remember the language that was called\n        // we need this with multiple fast calls to use()\n        // where translation loads might complete in random order\n        this.lastUseLanguage = lang;\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n        // on init set the currentLang immediately\n        if (!this.currentLang) {\n            this.currentLang = lang;\n        }\n        const pending = this.retrieveTranslations(lang);\n        if (isObservable(pending)) {\n            pending.pipe(take(1))\n                .subscribe(() => {\n                this.changeLang(lang);\n            });\n            return pending;\n        }\n        else {\n            // we have this language, return an Observable\n            this.changeLang(lang);\n            return of(this.translations[lang]);\n        }\n    }\n    /**\n     * Changes the current lang\n     */\n    changeLang(lang) {\n        // received a new language file\n        // but this was not the one requested last\n        if (lang !== this.lastUseLanguage) {\n            return;\n        }\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (this.defaultLang == null) {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Retrieves the given translations\n     */\n    retrieveTranslations(lang) {\n        // if this language is unavailable or extend is true, ask for it\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.loadAndCompileTranslations(lang);\n            return this._translationRequests[lang];\n        }\n        return undefined;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     *\n     * @deprecated This function is meant for internal use. There should\n     * be no reason to use outside this service. You can plug into this\n     * functionality by using a customer TranslateLoader or TranslateCompiler.\n     * To load a new language use setDefaultLang() and/or use()\n     */\n    getTranslation(lang) {\n        return this.loadAndCompileTranslations(lang);\n    }\n    loadAndCompileTranslations(lang) {\n        this.pending = true;\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n        this.loadingTranslations = loadingTranslations.pipe(map((res) => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n        this.loadingTranslations\n            .subscribe({\n            next: (res) => {\n                this.translations[lang] = (this.extend && this.translations[lang]) ? { ...res, ...this.translations[lang] } : res;\n                this.updateLangs();\n                this.pending = false;\n            },\n            error: (err) => {\n                void err;\n                this.pending = false;\n            }\n        });\n        return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n        const interpolatableTranslations = this.compiler.compileTranslations(translations, lang);\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], interpolatableTranslations);\n        }\n        else {\n            this.translations[lang] = interpolatableTranslations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Returns an array of currently available langs\n     */\n    getLangs() {\n        return this.langs;\n    }\n    /**\n     * Add available languages\n     */\n    addLangs(langs) {\n        const newLangs = langs.filter(lang => !this.langs.includes(lang));\n        if (newLangs.length > 0) {\n            this.langs = [...this.langs, ...newLangs];\n        }\n    }\n    /**\n     * Update the list of available languages\n     */\n    updateLangs() {\n        this.addLangs(Object.keys(this.translations));\n    }\n    getParsedResultForKey(translations, key, interpolateParams) {\n        let res;\n        if (translations) {\n            res = this.runInterpolation(getValue(translations, key), interpolateParams);\n        }\n        if (res === undefined && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.runInterpolation(getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (res === undefined) {\n            const params = { key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return res !== undefined ? res : key;\n    }\n    runInterpolation(translations, interpolateParams) {\n        if (isArray(translations)) {\n            return translations.map((translation) => this.runInterpolation(translation, interpolateParams));\n        }\n        else if (isDict(translations)) {\n            const result = {};\n            for (const key in translations) {\n                const res = this.runInterpolation(translations[key], interpolateParams);\n                if (res !== undefined) {\n                    result[key] = res;\n                }\n            }\n            return result;\n        }\n        else {\n            return this.parser.interpolate(translations, interpolateParams);\n        }\n    }\n    /**\n     * Returns the parsed result of the translations\n     */\n    getParsedResult(translations, key, interpolateParams) {\n        // handle a bunch of keys\n        if (key instanceof Array) {\n            const result = {};\n            let observables = false;\n            for (const k of key) {\n                result[k] = this.getParsedResultForKey(translations, k, interpolateParams);\n                observables = observables || isObservable(result[k]);\n            }\n            if (!observables) {\n                return result;\n            }\n            const sources = key.map(k => makeObservable(result[k]));\n            return forkJoin(sources).pipe(map((arr) => {\n                const obj = {};\n                arr.forEach((value, index) => {\n                    obj[key[index]] = value;\n                });\n                return obj;\n            }));\n        }\n        return this.getParsedResultForKey(translations, key, interpolateParams);\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @returns the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" is required and cannot be empty`);\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return this.loadingTranslations.pipe(concatMap((res) => {\n                return makeObservable(this.getParsedResult(res, key, interpolateParams));\n            }));\n        }\n        return makeObservable(this.getParsedResult(this.translations[this.currentLang], key, interpolateParams));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" is required and cannot be empty`);\n        }\n        return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap((event) => {\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return makeObservable(res);\n        })));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap((event) => {\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return makeObservable(res);\n        })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages\n     * will be used except any promise handling.\n     */\n    instant(key, interpolateParams) {\n        if (!isDefined(key) || key.length === 0) {\n            throw new Error('Parameter \"key\" is required and cannot be empty');\n        }\n        const result = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (isObservable(result)) {\n            if (Array.isArray(key)) {\n                return key.reduce((acc, currKey) => {\n                    acc[currKey] = currKey;\n                    return acc;\n                }, {});\n            }\n            return key;\n        }\n        return result;\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     */\n    set(key, translation, lang = this.currentLang) {\n        setValue(this.translations[lang], key, isString(translation)\n            ? this.compiler.compile(translation, lang)\n            : this.compiler.compileTranslations(translation, lang));\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Changes the default lang\n     */\n    changeDefaultLang(lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     */\n    reloadLang(lang) {\n        this.resetLang(lang);\n        return this.loadAndCompileTranslations(lang);\n    }\n    /**\n     * Deletes inner translation\n     */\n    resetLang(lang) {\n        delete this._translationRequests[lang];\n        delete this.translations[lang];\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     */\n    getBrowserLang() {\n        if (typeof window === 'undefined' || !window.navigator) {\n            return undefined;\n        }\n        const browserLang = this.getBrowserCultureLang();\n        return browserLang ? browserLang.split(/[-_]/)[0] : undefined;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     */\n    getBrowserCultureLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        return window.navigator.languages\n            ? window.navigator.languages[0]\n            : (window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateService, deps: [{ token: TranslateStore }, { token: TranslateLoader }, { token: TranslateCompiler }, { token: TranslateParser }, { token: MissingTranslationHandler }, { token: USE_DEFAULT_LANG }, { token: ISOLATE_TRANSLATE_SERVICE }, { token: USE_EXTEND }, { token: DEFAULT_LANGUAGE }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: () => [{ type: TranslateStore }, { type: TranslateLoader }, { type: TranslateCompiler }, { type: TranslateParser }, { type: MissingTranslationHandler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_DEFAULT_LANG]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ISOLATE_TRANSLATE_SERVICE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_EXTEND]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DEFAULT_LANGUAGE]\n                }] }] });\n\nclass TranslateDirective {\n    translateService;\n    element;\n    _ref;\n    key;\n    lastParams;\n    currentParams;\n    onLangChangeSub;\n    onDefaultLangChangeSub;\n    onTranslationChangeSub;\n    set translate(key) {\n        if (key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n    set translateParams(params) {\n        if (!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n    constructor(translateService, element, _ref) {\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event) => {\n                if (event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event) => {\n                void event;\n                this.checkNodes(true);\n            });\n        }\n    }\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n    checkNodes(forceUpdate = false, translations) {\n        let nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        nodes.forEach((n) => {\n            const node = n;\n            if (node.nodeType === 3) { // node type 3 is a text node\n                let key;\n                if (forceUpdate) {\n                    node.lastKey = null;\n                }\n                if (isDefined(node.lookupKey)) {\n                    key = node.lookupKey;\n                }\n                else if (this.key) {\n                    key = this.key;\n                }\n                else {\n                    const content = this.getContent(node);\n                    const trimmedContent = content.trim();\n                    if (trimmedContent.length) {\n                        node.lookupKey = trimmedContent;\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        });\n    }\n    updateValue(key, node, translations) {\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            const onTranslation = (res) => {\n                if (res !== key || !node.lastKey) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n            if (isDefined(translations)) {\n                const res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (isObservable(res)) {\n                    res.subscribe({ next: onTranslation });\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n    getContent(node) {\n        return (isDefined(node.textContent) ? node.textContent : node.data);\n    }\n    setContent(node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    }\n    ngOnDestroy() {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateDirective, deps: [{ token: TranslateService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.5\", type: TranslateDirective, isStandalone: true, selector: \"[translate],[ngx-translate]\", inputs: { translate: \"translate\", translateParams: \"translateParams\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[translate],[ngx-translate]',\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: TranslateService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], propDecorators: { translate: [{\n                type: Input\n            }], translateParams: [{\n                type: Input\n            }] } });\n\nclass TranslatePipe {\n    translate;\n    _ref;\n    value = '';\n    lastKey = null;\n    lastParams = [];\n    onTranslationChange;\n    onLangChange;\n    onDefaultLangChange;\n    constructor(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n    }\n    updateValue(key, interpolateParams, translations) {\n        const onTranslation = (res) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if (translations) {\n            const res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (isObservable(res)) {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    transform(query, ...args) {\n        if (!query || !query.length) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        let interpolateParams = undefined;\n        if (isDefined(args[0]) && args.length) {\n            if (isString(args[0]) && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                const validArgs = args[0]\n                    .replace(/(')?([a-zA-Z0-9_]+)(')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(')(.*?)(')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    void e;\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            }\n            else if (isDict(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event) => {\n                if (this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event) => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n        return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     */\n    _dispose() {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n    ngOnDestroy() {\n        this._dispose();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslatePipe, deps: [{ token: TranslateService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });\n    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslatePipe, isStandalone: true, name: \"translate\", pure: false });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslatePipe });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslatePipe, decorators: [{\n            type: Injectable\n        }, {\n            type: Pipe,\n            args: [{\n                    name: 'translate',\n                    standalone: true,\n                    pure: false // required to update the value when the promise is resolved\n                }]\n        }], ctorParameters: () => [{ type: TranslateService }, { type: i0.ChangeDetectorRef }] });\n\nfunction _(key) {\n    return key;\n}\n\nconst provideTranslateService = (config = {}) => {\n    return makeEnvironmentProviders([\n        config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n        config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n        config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n        config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n        TranslateStore,\n        { provide: ISOLATE_TRANSLATE_SERVICE, useValue: config.isolate },\n        { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n        { provide: USE_EXTEND, useValue: config.extend },\n        { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n        TranslateService\n    ]);\n};\nclass TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: ISOLATE_TRANSLATE_SERVICE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    /**\n     * Use this method in your other (non-root) modules to import the directive/pipe\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: ISOLATE_TRANSLATE_SERVICE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateModule, imports: [TranslatePipe,\n            TranslateDirective], exports: [TranslatePipe,\n            TranslateDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.5\", ngImport: i0, type: TranslateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        TranslatePipe,\n                        TranslateDirective\n                    ],\n                    exports: [\n                        TranslatePipe,\n                        TranslateDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, ISOLATE_TRANSLATE_SERVICE, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, _, equals, getValue, isArray, isDefined, isDict, isFunction, isObject, isString, mergeDeep, provideTranslateService, setValue };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}